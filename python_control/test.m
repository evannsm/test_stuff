clc;
clear;
close all;

% Define symbolic variables
syms alpha s;

% Define the state-space matrices as symbolic
A = sym([ 
    1.00000000,  0.00000000,  0.00000000,  0.24774681,  0.00000000,  0.00000000,  0.00000000,  0.01064996,  0.00000000,  0.00000000,  0.00098707,  0.00000000;
    0.00000000,  1.00000000,  0.00000000,  0.00000000,  0.24774681,  0.00000000, -0.01064996,  0.00000000,  0.00000000, -0.00098707,  0.00000000,  0.00000000;
    0.00000000,  0.00000000,  1.00000000,  0.00000000,  0.00000000,  0.24213548,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.98132336,  0.00000000,  0.00000000,  0.00000000,  0.08325852,  0.00000000,  0.00000000,  0.01182264,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.98132336,  0.00000000, -0.08325852,  0.00000000,  0.00000000, -0.01182264,  0.00000000,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.93521464,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.00000000, -0.00217520,  0.00000000,  0.70585561,  0.00000000,  0.00000000,  0.22277605,  0.00000000,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.00217520,  0.00000000,  0.00000000,  0.00000000,  0.70585561,  0.00000000,  0.00000000,  0.22277605,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  1.00000000,  0.00000000,  0.00000000,  0.24560748;
    0.00000000,  0.00000000,  0.00000000,  0.00000000, -0.01700514,  0.00000000, -2.30776000,  0.00000000,  0.00000000,  0.67335135,  0.00000000,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.01700514,  0.00000000,  0.00000000,  0.00000000, -2.30776000,  0.00000000,  0.00000000,  0.67335135,  0.00000000;
    0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.00000000,  0.96362936]);

B = sym([
    0.13762006,  0,  0,  0;
    0,  0.13762006,  0,  0;
    0,  0,  0.16384377,  0;
    1.16082525,  0,  0,  0;
    0,  1.16082525,  0,  0;
    0,  0,  1.34969628,  0;
    0, -1.00350368,  0,  0;
    1.00350368,  0,  0,  0;
    0,  0,  0,  5.09571505;
    0, -7.87802076,  0,  0;
    7.87802076,  0,  0,  0;
    0,  0,  0, 42.19334793])

% Set specific elements to 1
observer_matrix = zeros(4,12)
observer_matrix(1,1) = 1;
observer_matrix(2,2) = 1;
observer_matrix(3,3) = 1;
observer_matrix(4,9) = 1  % MATLAB uses 1-based indexing, equivalent to index 8 in Python

% Assign observer matrix to C
C = sym(observer_matrix)

% Create the symbolic phi matrix
I = eye(size(A));

% Compute phi matrix symbolically
tl = A
tr = B
bl = -inv(C * inv(A) * (expm(A * 0.25) - I) * B) * C * expm(A * 0.25)
br = -eye(4)

% Multiply bl and br by alpha
bl = alpha * bl;
br = alpha * br;

% Construct the modified phi_alpha matrix
phi_alpha = [[tl, tr]; [bl, br]];

% Compute the characteristic polynomial of phi_alpha
char_poly = simplify(det(s * eye(size(phi_alpha)) - phi_alpha));

% Extract terms multiplied by alpha
alpha_terms = collect(char_poly, alpha) - subs(char_poly, alpha, 0);

% Solve for roots of the alpha terms in floating-point form
alpha_roots = double(solve(alpha_terms == 0, s));

% Display the result
disp('Floating-point roots of the alpha terms in the characteristic polynomial:');
disp(alpha_roots);
